package utilities.custom;

import java.io.File;
import java.util.Collection;
import java.util.HashSet;
import java.util.Set;

import utilities.internal.FileManager;

public class UseCoGen {
	
	// TODO: EL convertidor de authority falla (las authorities no estan en domain, sino en security)
	
	public static void main(String[] args) throws Exception{
		log("\n\n##################################################\n USECOGEN (USEful COde GENerator) v 1.0\n##################################################");
		
		String entitiesPath = "src\\main\\java\\domain";
		
		File file = new File(entitiesPath);
		
		UseCoGen thisClass = new UseCoGen();
		
		Set<String> entities = thisClass.findEntities(file);
		log("entities search finished, found:");
		log(entities);
		
//		thisClass.generateRepositories(entities);
//		log("repositories generation finished");
//		
//		thisClass.generateServices(entities);
//		log("services generation finished");
		
		thisClass.generateControllers(entities);
		log("controllers generation finished");
		
//		thisClass.generateConverters(entities);
//		log("converters generation finished");
//		
//		thisClass.generateConvertersConfiguration(entities);
//		log("converters configuration finished");
		
		log ("\n\n ---------------------------------------------------------------------------------------------------" +
				"code generation finished!\nyou must fill interfaces, services and controllers code\n" +
				"converters are fully implemented and configured (AWESOME!)\n" +
				"ANYWAY it's recommended to check code that has been autogenerated to ensure that it fits your needs" +
				"\nhappy coding! ;)");
	}
	
	public Set<String> findEntities(File directory){
		Set<String> aux = new HashSet<String>();
		Set<String> res = new HashSet<String>();
		
		// Find classes into domain directory
		for (File f : directory.listFiles()){
			String name = f.getName();
			
			// Filter files that aren't java classes
			if (name.contains(".java") && !name.contains("DomainEntity")){
				name = name.substring(0, name.indexOf("."));
				aux.add(name);
			}
		}
		
		// Filter java classes that aren't entities (datatypes)
		res.addAll(aux);
		for (String s : aux){
			FileManager fileManager = new FileManager(directory.getAbsolutePath());
			@SuppressWarnings("static-access")
			String classPath = fileManager.getFilePath()+fileManager.getPathSeparator()+s+".java";
			fileManager.setFilePath(classPath);
			
			String fileContent = fileManager.readFile();
			if (! fileContent.contains("@Entity"))
				res.remove(s);
		}
		
		return res;
	}
	
	public void generateRepositories(Set<String> entitiesNames){
		String templatesPath = "src\\main\\resources\\code_templates";
		FileManager fileManager = new FileManager(templatesPath+"\\interface.txt");
		String template;
		String interfacesPath = "src\\main\\java\\repositories";

		
		template = fileManager.readFile();
		
		for(String entity : entitiesNames){
			fileManager.setFilePath(interfacesPath+"\\"+entity+"Repository.java");
			
			String code = "";
			
			code = template.replace("%entity%", entity);
			
			fileManager.writeFile(code);
		}
	}
	
	public void generateServices(Set<String> entitiesNames){
		String templatesPath = "src\\main\\resources\\code_templates";
		FileManager fileManager = new FileManager(templatesPath+"\\service.txt");
		String template;
		String servicesPath = "src\\main\\java\\services";
		
		template = fileManager.readFile();
		
		for(String entity : entitiesNames){
			fileManager.setFilePath(servicesPath+"\\"+entity+"Service.java");
			String code = template;
			
			code = code.replace("%entity%", entity);
			code = code.replace("%entity_lowcase%", entity.toLowerCase()); // Used into service variable name
			
			fileManager.writeFile(code);
		}
	}
	
	public void generateControllers(Set<String> entitiesNames){
		String templatesPath = "src\\main\\resources\\code_templates";
		FileManager fileManager = new FileManager(templatesPath+"\\controller.txt");
		String template;
		String controllersPath = "src\\main\\java\\controllers";
		
		template = fileManager.readFile();
		
		for(String entity : entitiesNames){
			fileManager.setFilePath(controllersPath+"\\"+entity+"Controller.java");
			
			String code = template;
			
			code = code.replace("%entity%", entity);
			code = code.replace("%entity_lowcase%", entity.toLowerCase()); // Used into service variable name
			
			fileManager.writeFile(code);
		}
	}

	@Deprecated
	public void generateConverters(Set<String> entitiesNames){
		String templatesPath = "src\\main\\resources\\code_templates";
		FileManager fileManager = new FileManager(templatesPath+"\\toStringConverter.txt");
		String template;
		String convertersPath = "src\\main\\java\\converters";
		
		template = fileManager.readFile();
		
		for(String entity : entitiesNames){
			fileManager.setFilePath(convertersPath+"\\"+entity+"ToStringConverter.java");
			
			String code = template;
			
			code = code.replace("%entity%", entity);
			code = code.replace("%entity_lowcase%", entity.toLowerCase()); // Used into service variable name
			
			fileManager.writeFile(code);
		}
		
		fileManager.setFilePath(templatesPath+"\\toEntityConverter.txt");
		
		template = fileManager.readFile();
		
		for(String entity : entitiesNames){
			fileManager.setFilePath(convertersPath+"\\StringTo"+entity+"Converter.java");
			
			String code = template;
			
			code = code.replace("%entity%", entity);
			code = code.replace("%entity_lowcase%", entity.toLowerCase()); // Used into service variable name

			fileManager.writeFile(code);
		}
	}

	public void generateConvertersConfiguration(Set<String> entitiesNames){
		String configurationFilePath = "src\\main\\resources\\spring\\config\\converters.xml";
		FileManager fileManager = new FileManager(configurationFilePath);
		String configuration;
		
		configuration = fileManager.readFile();
		
		// remove beans definition closing tag
		configuration = configuration.substring(0, configuration.indexOf("</util:list>"));
		
		// add converters beans
		for (String entity : entitiesNames){
			configuration += "		<bean class=\"converters.StringTo"+entity+"Converter\" />\n";
			configuration += "		<bean class=\"converters."+entity+"ToStringConverter\" />\n";
		}
		
		// add beans definition closing tags
		configuration += "	\n</util:list>\n</beans>";
		
		fileManager.writeFile(configuration);
	}
	
	@SuppressWarnings("unchecked")
	private static void log(Object o){
		if (o instanceof String)
			System.out.println(o);
		else if (o instanceof Collection){
			for (Object obj : (Collection<Object>)o){
				log(obj);
			}
		}
	}
}

