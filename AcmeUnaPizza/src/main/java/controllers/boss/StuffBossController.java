/* 
 * Autogenerated controller code.
 * Common methods code is autogenerated and commented, uncomment necessary methods and remove unnecessary ones.
 * It's recommended to check controller @RequestMapping anotation (maybe you need distinct controllers for distinct
 * actors).
 *
 */

package controllers.boss;

import java.util.Collection;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import services.StuffService;
import utilities.EntityHackingException;
import controllers.AbstractController;
import domain.Stuff;

@Controller
@RequestMapping("/boss/stuff")
public class StuffBossController extends AbstractController {
		
	// Supporting services ----------------------------------------------------

	@Autowired
	private StuffService stuffService;
	
	// Constructors -----------------------------------------------------------
	
	public StuffBossController() {
		super();
	}
	
	// Listing ----------------------------------------------------------------
	/**
	 * Create ModelAndView to list all stuff depending on status parameter:
	 * 	- If status is null all stuff will be listed.
	 * 	- If status is OK, MALFUNCTION or REPAIRING all stuff with the specified status will be listed.
	 *  - Otherwise the specified status is an invalid status.
	 *  
	 *  @param status - Status of the stuff to be listed.
	 *  @return ModelAndView to list all desired stuff.
	 *  @throws IllegalArgumentException - If specified status is an invalid status. 
	 * */
	@RequestMapping("/list")
	public ModelAndView list(@RequestParam(required=false) String status) {
		ModelAndView res;
		Collection<Stuff> stuffs;
		
		if(status == null) 
			stuffs = stuffService.findAll();
		else if (status.equals("OK"))
			stuffs = stuffService.findAllOkStuff();
		else if (status.equals("MALFUNCTION"))
			stuffs = stuffService.findAllMalfunctioningStuff();
		else if (status.equals("REPAIRING"))
			stuffs = stuffService.findAllRepairingStuff();
		else{
			throw new IllegalArgumentException("Tried to list all stuff with status '"+status+"', that is an invalid status");
		}	
		
		res = new ModelAndView("stuff/list");
		res.addObject("entities", stuffs);
		res.addObject("requestURI", "/boss/stuff/list.do");

		return res;
	}
	
	// Creation ---------------------------------------------------------------
	@RequestMapping(value = "/create", method = RequestMethod.GET)
	public ModelAndView create() {
		ModelAndView res;
		Stuff newbye;
		
		newbye = stuffService.create();
		res = createEditionModelAndView(newbye);
		
		return res;
	}
	
	// Edition ----------------------------------------------------------------

	@RequestMapping(value = "/edit", method = RequestMethod.GET)
	public ModelAndView edit(@RequestParam int stuffId) {
		ModelAndView res;
		Stuff stuff;
		
		stuff = stuffService.findOne(stuffId);
		res = createEditionModelAndView(stuff);
		
		return res;
	}
	
	@RequestMapping(value = "/edit", method = RequestMethod.POST, params = "save")
	public ModelAndView save(@Valid @ModelAttribute Stuff entity, BindingResult bindingResult) {
		ModelAndView result;
		String errorMsg;
		
		if (bindingResult.hasErrors()){
			result = createEditionModelAndView(entity, "details.edit.error");
			System.out.println(bindingResult);
		}
		else {
			try {
				stuffService.save(entity);
				result = new ModelAndView("redirect:/boss/stuff/list.do");
			} catch (Throwable oops) {
				if (oops instanceof EntityHackingException)
					errorMsg = "stuff.hacking.error";
				else
					errorMsg = "stuff.commit.error";
				
				result = createEditionModelAndView(entity, errorMsg);
			}
		}

		return result;
	}
	
	@RequestMapping(value = "/edit", method = RequestMethod.POST, params = "delete")
	public ModelAndView delete(@ModelAttribute Stuff entity, BindingResult bindingResult) {
		ModelAndView res;
		
		try{
			stuffService.delete(entity);
			res = new ModelAndView("redirect:/boss/stuff/list.do");
		}catch(Throwable oops){
			res = createEditionModelAndView(entity, "stuff.commit.error");
		}
		
		return res;
	}
	
	// Ancillary methods ------------------------------------------------------	
	public ModelAndView createEditionModelAndView(Stuff entity){
		return createEditionModelAndView(entity, null);
	}
	
	public ModelAndView createEditionModelAndView(Stuff entity, String message){
		ModelAndView res;
		
		res = new ModelAndView("stuff/edit");
		res.addObject("entity", entity);
		res.addObject("message", message);
		res.addObject("requestURI", "/boss/stuff/edit.do");		

		return res;
	}

}
