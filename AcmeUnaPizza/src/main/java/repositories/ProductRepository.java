/* 
* Autogenerated interface code 
* Variables (text between %) must have been replaced when code is autogenerated
*/
package repositories;

import java.util.Collection;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import domain.Product;

@Repository
public interface ProductRepository extends JpaRepository<Product, Integer>{
	
	// Pizza más vendida.
	@Query("select pro from SalesOrder sales join sales.products pro where pro.type = 'PIZZA' group by pro.name having count(sales) >= ALL(select count(so) from SalesOrder so join so.products p where p.type='PIZZA' group by p.name)")
	Collection<Product> findMoreSoldPizza();
	
	// Pizza menos vendida.
	@Query("select pro from SalesOrder sales join sales.products pro where pro.type = 'PIZZA' group by pro.name having count(sales) <= ALL(select count(so) from SalesOrder so join so.products p where p.type='PIZZA' group by p.name)")
	Collection<Product> findLessSoldPizza();
	
	// Complemento más vendido.
	@Query("select pro from SalesOrder sales join sales.products pro where pro.type = 'COMPLEMENT' group by pro.name having count(sales) >= ALL(select count(so) from SalesOrder so join so.products p where p.type='COMPLEMENT' group by p.name)")
	Collection<Product> findMoreSoldComplement();
		
	// Complemento menos vendido.
	@Query("select pro from SalesOrder sales join sales.products pro where pro.type = 'COMPLEMENT' group by pro.name having count(sales) <= ALL(select count(so) from SalesOrder so join so.products p where p.type='COMPLEMENT' group by p.name)")
	Collection<Product> findLessSoldComplement();
	
	// Postre más vendido.
	@Query("select pro from SalesOrder sales join sales.products pro where pro.type = 'DESSERT' group by pro.name having count(sales) >= ALL(select count(so) from SalesOrder so join so.products p where p.type='DESSERT' group by p.name)")
	Collection<Product> findMoreSoldDessert();
			
	// Postre menos vendido.
	@Query("select pro from SalesOrder sales join sales.products pro where pro.type = 'DESSERT' group by pro.name having count(sales) <= ALL(select count(so) from SalesOrder so join so.products p where p.type='DESSERT' group by p.name)")
	Collection<Product> findLessSoldDessert();
	
	// Bebida más vendida.
	@Query("select pro from SalesOrder sales join sales.products pro where pro.type = 'DRINK' group by pro.name having count(sales) >= ALL(select count(so) from SalesOrder so join so.products p where p.type='DRINK' group by p.name)")
	Collection<Product> findMoreSoldDrink();
				
	// Bebida menos vendida.
	@Query("select pro from SalesOrder sales join sales.products pro where pro.type = 'DRINK' group by pro.name having count(sales) <= ALL(select count(so) from SalesOrder so join so.products p where p.type='DRINK' group by p.name)")
	Collection<Product> findLessSoldDrink();
	
	// Pizzas en stock minimo
	@Query("select p from Product p where p.type = 'PIZZA' AND (p.actualStock <= p.minStock)")
	Collection<Product> findStockMinPizzas();
	
	// Complementos en stock minimo
	@Query("select p from Product p where p.type = 'COMPLEMENT' AND (p.actualStock <= p.minStock)")
	Collection<Product> findStockMinComplements();
	
	// Postres en stock minimo
	@Query("select p from Product p where p.type = 'DESSERT' AND (p.actualStock <= p.minStock)")
	Collection<Product> findStockMinDesserts();
	
	// Bebidas en stock minimo
	@Query("select p from Product p where p.type = 'DRINK' AND (p.actualStock <= p.minStock)")
	Collection<Product> findStockMinDrinks();
}
